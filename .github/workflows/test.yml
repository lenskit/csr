name: Run Tests
on:
  push:
    branches:
      - main
  release:
    types: [published]
  pull_request:

jobs:
  test:
    name: Test with Python ${{matrix.python}} on ${{matrix.platform}}
    runs-on: ${{matrix.platform}}-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
        - macos
        - windows
        - ubuntu
        python:
        - 3.7
        - 3.8
        - 3.9

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup conda
      uses: s-weigand/setup-conda@v1
      with:
        update-conda: true
        python-version: ${{ matrix.python }}
        conda-channels: conda-forge

    - name: Inspect environment
      run: |
        conda info
        conda info -s

    - name: Install pre-environment dependencies
      run: |
        conda install -qy -c conda-forge mamba flit-core packaging pyyaml

    - name: Prepare environment
      run: |
        python build-tools/flit-conda.py -E mkl --python-version ${{matrix.python}} --save-env environment.yml
        cat environment.yml

    - name: Create Conda environment
      run: |
        mamba env create -q -n csr -f environment.yml

    - name: ðŸ”Ž Inspect environment
      run: |
        conda run -n csr numba -s

    - name: ðŸ›  Compile MKL helper
      run: |
        conda run -n csr --no-capture-output python build_mkl.py

    - name: Run tests
      run: |
        conda run -n csr --no-capture-output python -m pytest --cov=csr -v

    - name: Run tests without JIT
      run: |
        conda run -n csr --no-capture-output python -m pytest --cov=csr --cov-append --log-file=test-nojit.log --hypothesis-profile=nojit
      env:
        NUMBA_DISABLE_JIT: 1

    - name: Aggregate coverage data
      run: conda run -n csr coverage xml

    - name: Upload coverage
      uses: codecov/codecov-action@v1

  sdist:
    name: Build Source Packages
    runs-on: ubuntu-latest
    needs: [test]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Fetch Git tags
      run: git fetch --tags

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install Python deps
      run: pip install -U flit

    - name: Build distribution
      run: flit build

    - name: Save archive
      uses: actions/upload-artifact@v1
      with:
        name: pypi-pkgs
        path: dist

    - name: List dist dir
      run: ls -R dist

    - name: Publish PyPI packages
      if: github.event_name == 'release'
      run: |
        flit publish
      shell: bash
      env:
        TWINE_NON_INTERACTIVE: y
        FLIT_USERNAME: __token__
        FLIT_PASSWORD: ${{ secrets.PYPI_TOKEN }}

